% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runViz.R
\name{runShiny}
\alias{runShiny}
\title{Run the scClustViz Shiny app}
\usage{
runShiny(filePath, outPath, cellMarkers = list(), annotationDB,
  rownameKeytype, exponent, pseudocount, FDRthresh, threshType, dDRthresh,
  logGERthresh)
}
\arguments{
\item{filePath}{A character vector giving the relative filepath to an RData
file containing two objects. One must be the list outputted by one of the
importData functions (either \code{\link{readFromSeurat}} or
\code{\link{readFromManual}}) containing the data for viewing in the app.
The other must be the list outputted by the \code{\link{clusterWiseDEtest}}
function containing differential gene expression results for viewing in the
app. As long as none of the name of the list elements have been changed,
the objects can be named anything you'd like. Note that any files generated
by the Shiny app (ie. saving the selected cluster solution, saving custom
set DE testing results) will be saved/loaded in the same directory as the
input file.}

\item{outPath}{Optional. If you'd like to save/load any analysis files
to/from a different directory than the input directory (for example, if
you're using data from a package), specify that directory here.}

\item{cellMarkers}{Optional. If you have canonical marker genes for expected
cell types, list them here (see example code below). Note that the gene
names must match rownames of your data (ie. use ensembl IDs if your gene
expression matrix rownames are ensembl IDs). The Shiny app will attempt to
label clusters in the tSNE projection by highest median gene expression.}

\item{annotationDB}{Optional. An AnnotationDbi object for your data's species
(ie. org.Mm.eg.db / org.Hs.eg.db for mouse / human respectively). If
present, gene names will be shown in gene-specific figures, official gene
symbols (instead of your rownames) will be displayed in figures, and gene
searches performed using both official gene symbols and your rownames. If
the gene IDs in your data aren't official gene symbols, using this argument
will make the visualization tool much more useful.}

\item{rownameKeytype}{Optional. A character vector indicating the
AnnotationDbi keytype (see \code{AnnotationDbi::keytypes(annotationDB)})
that represents your rownames. If the annotationDB argument is present and
this is missing, the function will assume the rownames are official gene
symbols. If less than 80% of rownames map to official gene symbols, the
function will try to predict the appropriate keytype of the rownames (this
takes a bit of time).}

\item{exponent}{Default = Taken from \code{clusterWiseDEtest} output. The log
base of your normalized input data. Seurat normalization uses the natural
log (set this to exp(1)), while other normalization methods generally use
log2 (set this to 2). This is used if you use the function for testing
differential gene expression between custom sets, and is set automatically
to match the parameters used in \code{clusterWiseDEtest}.}

\item{pseudocount}{Default = Taken from \code{clusterWiseDEtest} output. The
pseudocount added to all log-normalized values in your input data. Most
methods use a pseudocount of 1 to eliminate log(0) errors. This is used if
you use the function for testing differential gene expression between
custom sets, and is set automatically to match the parameters used in
\code{clusterWiseDEtest}.}

\item{FDRthresh}{Default = Taken from \code{clusterWiseDEtest} output. The
false discovery rate to use as a threshold for determining statistical
significance of differential expression calculated by the Wilcoxon rank-sum
test. This is used if you use the function for testing differential gene
expression between custom sets, and is set automatically to match the
parameters used in \code{clusterWiseDEtest}.}

\item{threshType}{Default = Taken from \code{clusterWiseDEtest} output.
Filtering genes for use in differential expression testing can be done
multiple ways. We use an expression ratio filter for comparing each cluster
to the rest of the tissue as a whole, but find that difference in detection
rates works better when comparing clusters to each other. You can set
threshType to \code{"logGER"} to use a gene expression ratio for all gene
filtering, or leave it as default (\code{"dDR"}) to use difference in
detection rate as the thresholding method when comparing clusters to each
other. This is used if you use the function for testing differential gene
expression between custom sets, and is set automatically to match the
parameters used in \code{clusterWiseDEtest}.}

\item{dDRthresh}{Default = Taken from \code{clusterWiseDEtest} output.
Magnitude of detection rate difference of a gene between clusters to use as
filter for determining which genes to test for differential expression
between clusters. This is used if you use the function for testing
differential gene expression between custom sets, and is set automatically
to match the parameters used in \code{clusterWiseDEtest}.}

\item{logGERthresh}{Default = Taken from \code{clusterWiseDEtest} output.
Magnitude of gene expression ratio for a gene between clusters to use as
filter for determining which genes to test for differential expression
between clusters. This is used if you use the function for testing
differential gene expression between custom sets, and is set automatically
to match the parameters used in \code{clusterWiseDEtest}.}
}
\value{
The function causes the scClustViz Shiny GUI app to open in a
  seperate window.
}
\description{
Performs differential expression testing between clusters for all cluster
solutions in order to assess the biological relevance of each cluster
solution. Differential expression testing is done using the Wilcoxon rank-sum
test implemented in the base R \code{stats} package. For details about what
is being compared in the tests, see the "Value" section.
}
\examples{
\dontrun{
 data_for_scClustViz <- readFromSeurat(your_seurat_object)
 rm(your_seurat_object)
 # All the data scClustViz needs is in 'data_for_scClustViz'.

 DE_for_scClustViz <- clusterWiseDEtest(data_for_scClustViz)

 save(data_for_scClustViz,DE_for_scClustViz,
      file="for_scClustViz.RData")
 # Save these objects so you'll never have to run this slow function again!

 runShiny(filePath="for_scClustViz.RData")

 ### Using example data from the MouseCortex package ###
 devtools::install_github("BaderLab/MouseCortex")
 viewMouseCortex("e13") 
 # MouseCortex has a wrapper function which calls the following:
 runShiny(system.file("e13/e13.RData",package="MouseCortex"),
          # Load input file (E13.5 data) from package directory.
          outPath="./",
          # Save any further analysis performed in the app to the
          # working directory rather than library directory.
          annotationDB="org.Mm.eg.db",
          # This is an optional argument, but will add annotations.
          cellMarkers=list("Cortical precursors"=c("Mki67","Sox2","Pax6",
                                                   "Pcna","Nes","Cux1","Cux2"),
                           "Interneurons"=c("Gad1","Gad2","Npy","Sst","Lhx6",
                                            "Tubb3","Rbfox3","Dcx"),
                           "Cajal-Retzius neurons"="Reln",
                           "Intermediate progenitors"="Eomes",
                           "Projection neurons"=c("Tbr1","Satb2","Fezf2",
                                                  "Bcl11b","Tle4","Nes",
                                                  "Cux1","Cux2","Tubb3",
                                                  "Rbfox3","Dcx")
                           )
          # This is a list of canonical marker genes per expected cell type.
          # The app uses this list to automatically annotate clusters.
          )
}

}
\seealso{
\code{\link{readFromSeurat}} or \code{\link{readFromManual}} for
  reading in data to generate the first input object for this function, and
  \code{\link{clusterWiseDEtest}} to do the differential expression testing
  to generate the second input object for this function.
}
